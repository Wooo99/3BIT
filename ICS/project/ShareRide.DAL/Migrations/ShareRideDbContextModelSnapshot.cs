// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShareRide.DAL;

#nullable disable

namespace ShareRide.DAL.Migrations
{
    [DbContext(typeof(ShareRideDbContext))]
    partial class ShareRideDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RideEntityUserEntity", b =>
                {
                    b.Property<Guid>("PassengerRidesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PassengersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PassengerRidesId", "PassengersId");

                    b.HasIndex("PassengersId");

                    b.ToTable("RideEntityUserEntity");
                });

            modelBuilder.Entity("ShareRide.DAL.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CarType")
                        .HasColumnType("int");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PassengerSeats")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2ca3bb3-2eb1-4426-b4aa-e6ebcac275ab"),
                            CarType = 2,
                            Manufacturer = 48,
                            Name = "test name",
                            OwnerGuid = new Guid("df9a1252-3cb3-4c2b-97f4-b7ed78d06c79"),
                            PassengerSeats = 4,
                            RegistrationYear = 2000
                        });
                });

            modelBuilder.Entity("ShareRide.DAL.Entities.RideEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DriverGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EstimatedEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DriverId");

                    b.ToTable("Rides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cea3495-b582-4ae0-bce3-15edb727ae76"),
                            CarId = new Guid("e2ca3bb3-2eb1-4426-b4aa-e6ebcac275ab"),
                            Destination = "Slavkov",
                            DriverGuid = new Guid("df9a1252-3cb3-4c2b-97f4-b7ed78d06c79"),
                            EstimatedEndTime = new DateTime(2022, 4, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = "Brno",
                            StartTime = new DateTime(2022, 4, 10, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ShareRide.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df9a1252-3cb3-4c2b-97f4-b7ed78d06c79"),
                            FirstName = "Adam",
                            LastName = "Kovacik"
                        });
                });

            modelBuilder.Entity("RideEntityUserEntity", b =>
                {
                    b.HasOne("ShareRide.DAL.Entities.RideEntity", null)
                        .WithMany()
                        .HasForeignKey("PassengerRidesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShareRide.DAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("PassengersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShareRide.DAL.Entities.CarEntity", b =>
                {
                    b.HasOne("ShareRide.DAL.Entities.UserEntity", "Owner")
                        .WithMany("OwnedCars")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ShareRide.DAL.Entities.RideEntity", b =>
                {
                    b.HasOne("ShareRide.DAL.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("ShareRide.DAL.Entities.UserEntity", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("ShareRide.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("OwnedCars");
                });
#pragma warning restore 612, 618
        }
    }
}
